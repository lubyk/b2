/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2BiFrictionJoint
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2BiFrictionJoint.h"


/** ~b2BiFrictionJoint()
 * 
 */
static int b2BiFrictionJoint__b2BiFrictionJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.BiFrictionJoint"));
    if (userdata->gc) {
      b2BiFrictionJoint *self = (b2BiFrictionJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2BiFrictionJoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2BiFrictionJoint: Unknown exception");
  }
  return dub_error(L);
}

/** Cast (class_name)
 * 
 */
static int b2BiFrictionJoint__cast_(lua_State *L) {

  b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata_n(L, 1, "b2.BiFrictionJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2BiFrictionJoint::GetAnchorA() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:50
 */
static int b2BiFrictionJoint_GetAnchorA(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2BiFrictionJoint::GetAnchorB() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:51
 */
static int b2BiFrictionJoint_GetAnchorB(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2BiFrictionJoint::GetReactionForce(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:53
 */
static int b2BiFrictionJoint_GetReactionForce(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    dub_pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2BiFrictionJoint::GetReactionTorque(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:54
 */
static int b2BiFrictionJoint_GetReactionTorque(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub_error(L);
}

/** void b2BiFrictionJoint::SetMuStatic(const b2Mat22 &muStatic)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:57
 */
static int b2BiFrictionJoint_SetMuStatic(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    b2Mat22 *muStatic = *((b2Mat22 **)dub_checksdata(L, 2, "b2.Mat22"));
    self->SetMuStatic(*muStatic);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMuStatic: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMuStatic: Unknown exception");
  }
  return dub_error(L);
}

/** b2Mat22 b2BiFrictionJoint::GetMuStatic() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:60
 */
static int b2BiFrictionJoint_GetMuStatic(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    dub_pushudata(L, new b2Mat22(self->GetMuStatic()), "b2.Mat22", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMuStatic: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMuStatic: Unknown exception");
  }
  return dub_error(L);
}

/** void b2BiFrictionJoint::SetMuKinetic(const b2Mat22 &muKinetic)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:63
 */
static int b2BiFrictionJoint_SetMuKinetic(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    b2Mat22 *muKinetic = *((b2Mat22 **)dub_checksdata(L, 2, "b2.Mat22"));
    self->SetMuKinetic(*muKinetic);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMuKinetic: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMuKinetic: Unknown exception");
  }
  return dub_error(L);
}

/** b2Mat22 b2BiFrictionJoint::GetMuKinetic() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:66
 */
static int b2BiFrictionJoint_GetMuKinetic(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    dub_pushudata(L, new b2Mat22(self->GetMuKinetic()), "b2.Mat22", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMuKinetic: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMuKinetic: Unknown exception");
  }
  return dub_error(L);
}

/** void b2BiFrictionJoint::Dump()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:69
 */
static int b2BiFrictionJoint_Dump(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub_error(L);
}

/** b2JointType b2Joint::GetType() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:109
 */
static int b2BiFrictionJoint_GetType(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:112
 */
static int b2BiFrictionJoint_GetBodyA(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:115
 */
static int b2BiFrictionJoint_GetBodyB(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2Joint::GetNext()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:130
 */
static int b2BiFrictionJoint_GetNext(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub_error(L);
}

/** void * b2Joint::GetUserData() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:134
 */
static int b2BiFrictionJoint_GetUserData(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Joint::SetUserData(void *data)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:137
 */
static int b2BiFrictionJoint_SetUserData(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    void *data = *((void **)dub_checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::IsActive() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:140
 */
static int b2BiFrictionJoint_IsActive(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:145
 */
static int b2BiFrictionJoint_GetCollideConnected(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:151
 */
static int b2BiFrictionJoint_ShiftOrigin(lua_State *L) {
  try {
    b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata(L, 1, "b2.BiFrictionJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2BiFrictionJoint___tostring(lua_State *L) {
  b2BiFrictionJoint *self = *((b2BiFrictionJoint **)dub_checksdata_n(L, 1, "b2.BiFrictionJoint"));
  lua_pushfstring(L, "b2.BiFrictionJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2BiFrictionJoint_member_methods[] = {
  { "__gc"         , b2BiFrictionJoint__b2BiFrictionJoint },
  { "_cast_"       , b2BiFrictionJoint__cast_ },
  { "GetAnchorA"   , b2BiFrictionJoint_GetAnchorA },
  { "GetAnchorB"   , b2BiFrictionJoint_GetAnchorB },
  { "GetReactionForce", b2BiFrictionJoint_GetReactionForce },
  { "GetReactionTorque", b2BiFrictionJoint_GetReactionTorque },
  { "SetMuStatic"  , b2BiFrictionJoint_SetMuStatic },
  { "GetMuStatic"  , b2BiFrictionJoint_GetMuStatic },
  { "SetMuKinetic" , b2BiFrictionJoint_SetMuKinetic },
  { "GetMuKinetic" , b2BiFrictionJoint_GetMuKinetic },
  { "Dump"         , b2BiFrictionJoint_Dump },
  { "GetType"      , b2BiFrictionJoint_GetType },
  { "GetBodyA"     , b2BiFrictionJoint_GetBodyA },
  { "GetBodyB"     , b2BiFrictionJoint_GetBodyB },
  { "GetNext"      , b2BiFrictionJoint_GetNext },
  { "GetUserData"  , b2BiFrictionJoint_GetUserData },
  { "SetUserData"  , b2BiFrictionJoint_SetUserData },
  { "IsActive"     , b2BiFrictionJoint_IsActive },
  { "GetCollideConnected", b2BiFrictionJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2BiFrictionJoint_ShiftOrigin },
  { "__tostring"   , b2BiFrictionJoint___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_BiFrictionJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.BiFrictionJoint");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2BiFrictionJoint_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "BiFrictionJoint", "BiFrictionJoint");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
