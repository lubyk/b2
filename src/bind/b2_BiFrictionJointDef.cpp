/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2BiFrictionJointDef
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2BiFrictionJoint.h"


/** ~b2BiFrictionJointDef()
 * 
 */
static int b2BiFrictionJointDef__b2BiFrictionJointDef(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.BiFrictionJointDef"));
    if (userdata->gc) {
      b2BiFrictionJointDef *self = (b2BiFrictionJointDef *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2BiFrictionJointDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2BiFrictionJointDef: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2BiFrictionJointDef__set_(lua_State *L) {

  b2BiFrictionJointDef *self = *((b2BiFrictionJointDef **)dub_checksdata_n(L, 1, "b2.BiFrictionJointDef"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 8);
  switch(key_h) {
    case 6: {
      if (DUB_ASSERT_KEY(key, "muStatic")) break;
      self->muStatic = **((b2Mat22 **)dub_checksdata_n(L, 3, "b2.Mat22"));
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "muKinetic")) break;
      self->muKinetic = **((b2Mat22 **)dub_checksdata_n(L, 3, "b2.Mat22"));
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      self->type = (b2JointType)luaL_checkint(L, 3);
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      dub_protect(L, 1, 3, "userData");
      self->userData = *((void **)dub_checksdata_n(L, 3, "void"));
      return 0;
    }
    case 7: {
      if (DUB_ASSERT_KEY(key, "bodyA")) break;
      dub_protect(L, 1, 3, "bodyA");
      self->bodyA = *((b2Body **)dub_checksdata_n(L, 3, "b2.Body"));
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "bodyB")) break;
      dub_protect(L, 1, 3, "bodyB");
      self->bodyB = *((b2Body **)dub_checksdata_n(L, 3, "b2.Body"));
      return 0;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "collideConnected")) break;
      self->collideConnected = luaL_checkboolean(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2BiFrictionJointDef__get_(lua_State *L) {

  b2BiFrictionJointDef *self = *((b2BiFrictionJointDef **)dub_checksdata_n(L, 1, "b2.BiFrictionJointDef", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 8);
  switch(key_h) {
    case 6: {
      if (DUB_ASSERT_KEY(key, "muStatic")) break;
      dub_pushudata(L, &self->muStatic, "b2.Mat22", false);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "muKinetic")) break;
      dub_pushudata(L, &self->muKinetic, "b2.Mat22", false);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      lua_pushnumber(L, self->type);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      void *retval__ = self->userData;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "void", false);
      return 1;
    }
    case 7: {
      if (DUB_ASSERT_KEY(key, "bodyA")) break;
      b2Body *retval__ = self->bodyA;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.Body", false);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "bodyB")) break;
      b2Body *retval__ = self->bodyB;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.Body", false);
      return 1;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "collideConnected")) break;
      lua_pushboolean(L, self->collideConnected);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int b2BiFrictionJointDef__cast_(lua_State *L) {

  b2BiFrictionJointDef *self = *((b2BiFrictionJointDef **)dub_checksdata_n(L, 1, "b2.BiFrictionJointDef"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "b2.JointDef")) break;
      *retval__ = static_cast<b2JointDef *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2BiFrictionJointDef::b2BiFrictionJointDef()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:28
 */
static int b2BiFrictionJointDef_b2BiFrictionJointDef(lua_State *L) {
  try {
    b2BiFrictionJointDef *retval__ = new b2BiFrictionJointDef();
    dub_pushudata(L, retval__, "b2.BiFrictionJointDef", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2BiFrictionJointDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2BiFrictionJointDef: Unknown exception");
  }
  return dub_error(L);
}

/** void b2BiFrictionJointDef::Initialize(b2Body *body, const b2Vec2 &mu)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2BiFrictionJoint.h:35
 */
static int b2BiFrictionJointDef_Initialize(lua_State *L) {
  try {
    b2BiFrictionJointDef *self = *((b2BiFrictionJointDef **)dub_checksdata(L, 1, "b2.BiFrictionJointDef"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int type__ = lua_type(L, 4);
      void **ptr4__;
      if ( (ptr4__ = dub_issdata(L, 4, "b2.Mat22", type__)) ) {
        b2Body *body = *((b2Body **)dub_checksdata(L, 2, "b2.Body"));
        b2Mat22 *muStatic = *((b2Mat22 **)dub_checksdata(L, 3, "b2.Mat22"));
        b2Mat22 *muKinetic = *((b2Mat22 **)ptr4__);
        self->Initialize(body, *muStatic, *muKinetic);
        return 0;
      } else {
        b2Body *body = *((b2Body **)dub_checksdata(L, 2, "b2.Body"));
        b2Vec2 *muStatic = *((b2Vec2 **)dub_checksdata(L, 3, "b2.Vec2"));
        b2Vec2 *muKinetic = *((b2Vec2 **)dub_checksdata(L, 4, "b2.Vec2"));
        self->Initialize(body, *muStatic, *muKinetic);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 3);
      void **ptr3__;
      if ( (ptr3__ = dub_issdata(L, 3, "b2.Mat22", type__)) ) {
        b2Body *body = *((b2Body **)dub_checksdata(L, 2, "b2.Body"));
        b2Mat22 *muStatic = *((b2Mat22 **)ptr3__);
        self->Initialize(body, *muStatic);
        return 0;
      } else {
        b2Body *body = *((b2Body **)dub_checksdata(L, 2, "b2.Body"));
        b2Vec2 *mu = *((b2Vec2 **)dub_checksdata(L, 3, "b2.Vec2"));
        self->Initialize(body, *mu);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Initialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Initialize: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2BiFrictionJointDef___tostring(lua_State *L) {
  b2BiFrictionJointDef *self = *((b2BiFrictionJointDef **)dub_checksdata_n(L, 1, "b2.BiFrictionJointDef"));
  lua_pushfstring(L, "b2.BiFrictionJointDef: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2BiFrictionJointDef_member_methods[] = {
  { "__gc"         , b2BiFrictionJointDef__b2BiFrictionJointDef },
  { "__newindex"   , b2BiFrictionJointDef__set_ },
  { "__index"      , b2BiFrictionJointDef__get_ },
  { "_cast_"       , b2BiFrictionJointDef__cast_ },
  { "new"          , b2BiFrictionJointDef_b2BiFrictionJointDef },
  { "Initialize"   , b2BiFrictionJointDef_Initialize },
  { "__tostring"   , b2BiFrictionJointDef___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_BiFrictionJointDef(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.BiFrictionJointDef");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2BiFrictionJointDef_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "BiFrictionJointDef", "BiFrictionJointDef");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
